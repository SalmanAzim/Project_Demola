<!DOCTYPE html>
<html lang="en">
<head>



	<link rel="stylesheet" href="js/controllers/reset.css">
	<link rel="stylesheet" type="text/css" href="js/controllers/main.css">


<!-- <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script> -->


	

<script type="text/javascript" src="js/controllers/angular.js"></script>
<script type="text/javascript" src="js/controllers/angular-fusioncharts.min.js"></script>
<script type="text/javascript" src="js/controllers/fusioncharts.js"></script>
<script type="text/javascript" src="js/controllers/fusioncharts.widgets.js"></script>
<script type="text/javascript" src="js/controllers/fusioncharts.theme.fint.js"></script>
<script> var elementDragged = null;	var right_global; var test_data</script>
<script>var loggedinUser = <%- JSON.stringify(user) %>;</script>
<script src="js/controllers/demo.js"></script>
<script type="text/javascript" src="js/controllers/test.js"></script>
<script type="text/javascript" src="js/controllers/svg_script.js"></script>
<script src="/socket.io/socket.io.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>

    <script src="js/controllers/jquery.ui.core.js"></script>
    <script src="js/controllers/jquery.ui.widget.js"></script>
    <script src="js/controllers/jquery.ui.mouse.js"></script>
    <script src="js/controllers/jquery.ui.draggable.js"></script>
    <script src="js/controllers/jquery-collision.min.js"></script>
    <script src="js/controllers/jquery-ui-draggable-collision.js"></script>

<script src="js/controllers/CollapsibleLists.js"></script>



<script>

function menu(x, y,i) {
  i.top = y + "px";
  i.left = x + "px";
  i.visibility = "visible";
  i.opacity = "1";
}

</script>


<script>
function showCustomMenu(currElement) {

		right_global = currElement;
		var e = window.event;
		var i = document.getElementById("menu").style;
		var posX = e.clientX;
		var posY = e.clientY;
		menu(posX, posY,i);
		e.preventDefault();
	
}


</script>




<script>

function feedDataToElement(currElement){

var mychart;
var chartType = right_global.getAttribute("type");
console.log(right_global.getAttribute("type"));
		function addLeadingZero(num){
               return (num <= 9)? ("0"+num) : num;
         }

var chart_id = document.getElementById(right_global.id).children[0].id;
		function updateData() {

		
		mychart = FusionCharts(chart_id);
                        currDate = new Date(),
                        label = addLeadingZero(currDate.getHours()) + ":" +
                                addLeadingZero(currDate.getMinutes()) + ":" +
                                addLeadingZero(currDate.getSeconds());
if(chartType == 'angulargauge' || chartType == 'cylinder'){
randomValue = Math.floor(Math.random() * 200) + 50,
strData ="&value=" + randomValue;
}
else if(chartType == "realtimeline"){
randomValue = Math.floor(Math.random() * 50) / 100 + 35.25,
strData = "&label=" + label  + "&value=" + randomValue;
}		
					test_data = strData;
                    mychart.feedData(strData);
			}
			
			               var myVar = setInterval(function () {
                   updateData();
               }, 1000);

			   

}

</script>




<script>
function removeCustomMenu(currElement) {

right_global.remove();

		var e = window.event;
		var i = document.getElementById("menu").style;
    i.opacity = "0";
    setTimeout(function() {
      i.visibility = "hidden";
    });
	
	
right_global = null;
	
}


</script>



<script>


function showDoubleMenu(currElement) {
		
}


</script>




<script>
var xsd;
var mychart;
//var app = angular.module("myApp", []);
var app = angular.module("myApp", ["ng-fusioncharts","test","app"]);
app.controller('MyController', function($scope) {
    //Define the `myDataSource` scope variable.
    $scope.myDataSource = {
        chart: {
            //Define the chart attributes.
			"caption": "Monthly revenue for last year",
            "subCaption": "Harry's SuperMart",
            "xAxisName": "Month",
            "yAxisName": "Revenues (In USD)",
            "theme": "fint"
        },
        data: [
            //Define the data labels and data values for the data plots.
			{
               "label": "Jan",
               "value": "420000"
            },
            {
               "label": "Feb",
               "value": "810000"
            },
            {
               "label": "Mar",
               "value": "720000"
            },
            {
               "label": "Apr",
               "value": "550000"
            },
            {
               "label": "May",
               "value": "910000"
            },
            {
               "label": "Jun",
               "value": "510000"
            },
            {
               "label": "Jul",
               "value": "680000"
            },
            {
               "label": "Aug",
               "value": "620000"
            },
            {
               "label": "Sep",
               "value": "610000"
            },
            {
               "label": "Oct",
               "value": "490000"
            },
            {
               "label": "Nov",
               "value": "900000"
            },
            {
               "label": "Dec",
               "value": "730000"
            }
        ]
    };
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		$scope.updateMyChartData = function() {
		}
		
		$scope.updateMyChartData_new = function() {
		
					var test = {label:"13"};
					$scope.categories[0]["category"].push(test);
					$scope.dataset[0].data.push({"value": "10400"});
					$scope.dataset[1].data.push({"value": "15400"});					
					
					var test = {label:"14"};
					$scope.categories[0]["category"].push(test);
					$scope.dataset[0].data.push({"value": "10400"});
					$scope.dataset[1].data.push({"value": "15400"});
					
					var test = {label:"15"};
					$scope.categories[0]["category"].push(test);					
					$scope.dataset[0].data.push({"value": "10400"});
					$scope.dataset[1].data.push({"value": "15400"});
						
		}
		
		$scope.updateMyChartData_real = function(){
		
		
		               function addLeadingZero(num){
                   return (num <= 9)? ("0"+num) : num;
               }
			   
		function updateData() {
					mychart = FusionCharts("chartobject-1");
                        currDate = new Date(),
                        label = addLeadingZero(currDate.getHours()) + ":" +
                                addLeadingZero(currDate.getMinutes()) + ":" +
                                addLeadingZero(currDate.getSeconds()),
                        // Get random number between 35.25 & 35.75 - rounded to 2 decimal places
                        randomValue = Math.floor(Math.random() * 50) / 100 + 35.25,
                        // Build Data String in format &label=...&value=...
                        strData = "&label=" + label 
                                    + "&value=" 
                                    + randomValue;
                    // Feed it to chart.
                    mychart.feedData(strData);
			}
			
			               var myVar = setInterval(function () {
                   updateData();
               }, 2000);
						
		}
		


//////////////////////////////////////////////////////////////////////////////////////////////////////////////FOR REAL TIME GRAPH


	$scope.myRealTimeData = {
    'chart': {
        'caption': 'Real',
        'subCaption': 'LABEL',
        'xAxisName': 'x-axis',
        'yAxisName': 'y-axis',
        'numberPrefix': '$',
        'refreshinterval': '5',
        'yaxisminvalue': '35',
        'yaxismaxvalue': '36',
        'numdisplaysets': '10',
        'labeldisplay': 'rotate',
        'showValues': '0',
        'showRealTimeValue': '0',
        'theme': 'fint'
    },
    'categories': [
        {
            'category': [
                {
                    'label': 'Day Start'
                }
            ]
        }
    ],
    'dataset': [
        {
            'data': [
                {
                    'value': '37.27'
                }
            ]
        }
    ]
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////FOR REAL TIME GAUGE
        $scope.dataSource_gauge = {
            "chart": {
                "caption" : "Speedometer",
                "captionFont":"Arial",
                "captionFontColor" : "#333333",
                "manageresize": "1",
                "origw": "320",
                "origh": "320",
                "tickvaluedistance": "-10",
                "bgcolor": "#FFFFFF",
                "upperlimit": "240",
                "lowerlimit": "0",
                "basefontcolor": "#FFFFFF",
                "majortmnumber": "9",
                "majortmcolor": "#FFFFFF",
                "majortmheight": "8",
                "majortmthickness": "5",
                "minortmnumber": "5",
                "minortmcolor": "#FFFFFF",
                "minortmheight": "3",
                "minortmthickness": "2",
                "pivotradius": "10",
                "pivotbgcolor": "#000000",
                "pivotbordercolor": "#FFFFFF",
                "pivotborderthickness": "2",
                "tooltipbordercolor": "#FFFFFF",
                "tooltipbgcolor": "#333333",
                "gaugeouterradius": "115",
                "gaugestartangle": "240",
                "gaugeendangle": "-60",
                "gaugealpha": "0",
                "decimals": "0",
                "showcolorrange": "0",
                "placevaluesinside": "1",
                "pivotfillmix": "",
                "showpivotborder": "1",
                "annrenderdelay": "0",
                "gaugeoriginx": "160",
                "gaugeoriginy": "160",
                "showborder": "0"
            },
            "dials": {
                "dial": [
                    {
                        "value": "0",
                        "bgcolor": "000000",
                        "bordercolor": "#FFFFFF",
                        "borderalpha": "100",
                        "basewidth": "4",
                        "topwidth": "4",
                        "borderthickness": "2",
                        "valuey": "260"
                    }
                ]
            },
            "annotations": {
                "groups": [
                    {
                        "x": "160",
                        "y": "160",
                        "items": [
                            {
                                "type": "circle",
                                "radius": "130",
                                "fillasgradient": "1",
                                "fillcolor": "#4B4B4B,#AAAAAA",
                                "fillalpha": "100,100",
                                "fillratio": "95,5"
                            },
                            {
                                "type": "circle",
                                "x": "0",
                                "y": "0",
                                "radius": "120",
                                "showborder": "1",
                                "bordercolor": "cccccc",
                                "fillasgradient": "1",
                                "fillcolor": "#ffffff,#000000",
                                "fillalpha": "50,100",
                                "fillratio": "1,99"
                            }
                        ]
                    },
                    {
                        "x": "160",
                        "y": "160",
                        "showbelow": "0",
                        "scaletext": "1",
                        "items": [
                            {
                                "type": "text",
                                "y": "100",
                                "label": "KPH",
                                "fontcolor": "#FFFFFF",
                                "fontsize": "14",
                                "bold": "1"
                            }
                        ]
                    }
                ]
            }
        };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////FOR REAL TIME CYLINDER
        $scope.dataSource_cylinder = {
                "chart": {
                    "theme": "fint",
                    "caption": "Diesel Level in Generator",
                    "subcaption": "Bakersfield Central",
                    "lowerLimit": "0",
                    "upperLimit": "220",
                    "lowerLimitDisplay": "Empty",
                    "upperLimitDisplay": "Full",
                    "numberSuffix": " ltrs",
                    "showValue": "1",
                    "chartBottomMargin": "25" 
                },
                "value": "110",
                    "annotations": {
        "origw": "400",
        "origh": "190",
        "autoscale": "1",
        "groups": [
            {
                "id": "range",
                "items": [
                    {
                        "id": "rangeBg",
                        "type": "rectangle",
                        "x": "$canvasCenterX-45",
                        "y": "$chartEndY-30",
                        "tox": "$canvasCenterX +45",
                        "toy": "$chartEndY-75",
                        "fillcolor": "#6caa03"
                    },
                    {
                        "id": "rangeText",
                        "type": "Text",
                        "fontSize": "11",
                        "fillcolor": "#333333",
                        //"text": "80 ltrs",
                        "x": "$chartCenterX-45",
                        "y": "$chartEndY-50"
                    }
                ]
            }
        ]
    }
            };


//////////////////////////////////////////////////////////////////////////////////////////////////////////////FOR REAL TIME CYLINDER

$scope.myevents = {
    dataplotclick: function (ev, props) {
        $scope.$apply(function () {
            $scope.selectedValue = props.displayValue;
        });
    },
	chartClick: function (eventObj, argsObj) {
                console.log('Chart clicked at ' + argsObj.chartX + ',' + argsObj.chartY);
    }
	
/*
	"initialized": function (e) {
               function addLeadingZero(num){
                   return (num <= 9)? ("0"+num) : num;
               }
               function updateData() {
                    // Get reference to the chart using its ID
                    var chartRef = FusionCharts("chartobject-1"),
                        // We need to create a querystring format incremental update, containing
                        // label in hh:mm:ss format
                        // and a value (random).
                        currDate = new Date(),
                        label = addLeadingZero(currDate.getHours()) + ":" +
                                addLeadingZero(currDate.getMinutes()) + ":" +
                                addLeadingZero(currDate.getSeconds()),
                        // Get random number between 35.25 & 35.75 - rounded to 2 decimal places
                        randomValue = Math.floor(Math.random()     
                                                  * 50) / 100 + 35.25,
                        // Build Data String in format &label=...&value=...
                        strData = "&label=" + label 
                                    + "&value=" 
                                    + randomValue;
                    // Feed it to chart.
                    chartRef.feedData(strData);
                }

               var myVar = setInterval(function () {
                   updateData();
               }, 5000);
           }
*/
	
	
}
	
	
});



</script>


<script>

function setAllDrags() {
//var $draggables = $("li.drag-elements-new-li");
var $draggables_p = $("#drop-target-one");
var $draggables = $draggables_p.children();
var id, $draggableItem;
//var $my_test_array = new Array();
for (var i = 0; i < $draggables.length; i++) {
        //$draggableItem = $draggables.eq(i);
        //id = $draggableItem.attr("id");
			
			var $my_test_array = new Array();
			
		for(var j=0;j<$draggables.length; j++){
			
			//$draggableItem = $draggables.eq(j);
			
			if($draggables.eq(i)[0] != $draggables.eq(j)[0] ){
				$draggableItem = $draggables.eq(j);
				$my_test_array.push($draggableItem);
			}
			
		}
		
		$($draggables.eq(i)).draggable({
//            obstacle: "li.obstacle[id!=\"" + id + "\"]",
			obstacle: $my_test_array,
            preventCollision: true,
			containment: "#drop-target-one"	,
			stop: function(event, ui)
			{
			},
			drag: function(event, ui)
			{
			
				socket.emit('moveObject', {'loggedinUser': loggedinUser, currentId:this.id, positionX:ui.position.left, positionY:ui.position.top});

			}
	
        });


		
	
}


}

</script>


<script>

  var socket = io();
socket.on("tweet", function(notificationData) {
    // todo: add the tweet as a DOM node
	
//	mychart = FusionCharts("chartobject-1");
//	mychart.feedData(notificationData);
	//console.log("tweet from", notificationData);
	
});

socket.on("added_Html", function(notificationData) {


	
	if(notificationData.loggedinUser != loggedinUser){
			//console.log(notificationData.loggedinUser);		

if(notificationData.isAngular){

			var $htmlObject = $(notificationData.currentHtml);
			$htmlObject.attr("dataSource",JSON.stringify(notificationData.dataSource));
			   $htmlObject.css({
                    position: 'absolute',
                    cursor: 'pointer'
                });
			var angular_obj = $htmlObject[0];
				angular_obj.setAttribute("oncontextmenu","showCustomMenu(this)");
				angular_obj.setAttribute("ondblclick","showDoubleMenu(this)");

		angular.injector(['ng', 'myApp']).invoke(function ($compile) {
					var $scope = angular.element(document.body).scope();
					var dataSource = notificationData.dataSource;
					
					var to_compile = angular_obj;
					//var to_compile = notificationData.currentHtml;
					var $compiled = $compile(to_compile)($scope);
					$scope.$digest();
					// Append the compiled output to the page.
					//$compiled.appendTo(document.body);
					$("#drop-target-one").append($compiled[0]);
		 });	


}else{
			var $htmlObject = $(notificationData.currentHtml);
			$("#drop-target-one").append($htmlObject);
}			

			setAllDrags();
			
			//var markup = notificationData.currentHtml;
			//var el = str2DOMElement(markup);

			//var nodes_test = document.getElementById("drop-target-one");
			//nodes_test.appendChild(el);
			
	}
	
	
});


socket.on("moved_Html", function(notificationData) {

	if(notificationData.loggedinUser != loggedinUser){
	
			console.log(notificationData);		
//loggedinUser=" + loggedinUser + "&currentId=" + this.id + "&positionX=" + ui.position.left+ "&positionY=" + ui.position.top;
			var nodes_test = document.getElementById(notificationData.currentId);
				nodes_test.style.top=(notificationData.positionY)+ "px";
				nodes_test.style.left=(notificationData.positionX)+ "px";				
			
	}
	

	
});




</script>







<!--
<script type="text/javascript">
var xx;
var test = {label: "Test", value: "520000"};
  FusionCharts.ready(function(){
    //var revenueChart = new FusionCharts({
	  xx = new FusionCharts({
        "type": "column2d",
        "renderAt": "chartContainer",
        "width": "400",
        "height": "300",
        "dataFormat": "json",
        "dataSource":  {
          "chart": {
            "caption": "Monthly revenue for last year",
            "subCaption": "Harry's SuperMart",
            "xAxisName": "Month",
            "yAxisName": "Revenues (In USD)",
            "theme": "fint"
         },
         "data": [
            {
               "label": "Jan",
               "value": "420000"
            },
            {
               "label": "Feb",
               "value": "810000"
            },
            {
               "label": "Mar",
               "value": "720000"
            },
            {
               "label": "Apr",
               "value": "550000"
            },
            {
               "label": "May",
               "value": "910000"
            },
            {
               "label": "Jun",
               "value": "510000"
            },
            {
               "label": "Jul",
               "value": "680000"
            },
            {
               "label": "Aug",
               "value": "620000"
            },
            {
               "label": "Sep",
               "value": "610000"
            },
            {
               "label": "Oct",
               "value": "490000"
            },
            {
               "label": "Nov",
               "value": "900000"
            },
            {
               "label": "Dec",
               "value": "730000"
            }
          ]
      }

  });

  //revenueChart.render();
  xx.render();
  //xx.args.dataSource;
})


</script>


<script>
function myFunction() {

var xx;
var test = {label: "Test", value: "520000"};
  FusionCharts.ready(function(){
    //var revenueChart = new FusionCharts({
	  xx = new FusionCharts({
        "type": "column2d",
        "renderAt": "chartContainer",
        "width": "400",
        "height": "300",
        "dataFormat": "json",
        "dataSource":  {
          "chart": {
            "caption": "Monthly revenue for last year",
            "subCaption": "Harry's SuperMart",
            "xAxisName": "Month",
            "yAxisName": "Revenues (In USD)",
            "theme": "fint"
         },
         "data": [
            {
               "label": "Jan",
               "value": "420000"
            },
            {
               "label": "Feb",
               "value": "810000"
            },
            {
               "label": "Mar",
               "value": "720000"
            },
            {
               "label": "Apr",
               "value": "550000"
            },
            {
               "label": "May",
               "value": "910000"
            },
            {
               "label": "Jun",
               "value": "510000"
            },
            {
               "label": "Jul",
               "value": "680000"
            },
            {
               "label": "Aug",
               "value": "620000"
            },
            {
               "label": "Sep",
               "value": "610000"
            },
            {
               "label": "Oct",
               "value": "490000"
            },
            {
               "label": "Nov",
               "value": "900000"
            },
            {
               "label": "Dec",
               "value": "730000"
            },
			{
               "label": "Test",
               "value": "950000"
            }
			
          ]
      }

  });

  //revenueChart.render();
  xx.render();
  //xx.args.dataSource;
})


}
</script>

-->


	<meta charset="utf-8">
	<title>Factory Visualiztion</title>
	

</head>
<body id="my_body"  ng-app="myApp" ng-controller="MyController">




<div class="left">

<ul class="collapsibleList">
  <li>
    Elements
			<ul id="drag-elements1" class="drag-elements">
				<li id="aaa" class="drag-elements-li obstacle" draggable="true">Element One</li>
				<li id="bbb" class="drag-elements-li obstacle" draggable="true">Element Two</li>
				<li class="drag-elements-li"  draggable="true">Element Three</li>
				<li class="drag-elements-li"  draggable="true">Element Four</li>
				<li class="drag-elements-li"  draggable="true">Element Five</li>
				
			</ul>
  </li>

</ul>

<ul class="collapsibleList">
  <li>
    Elements SVG
			<ul>
				<svg-icon p="bookmark" draggable="true"></svg-icon>
				<svg-icon p="calendar" draggable="true"></svg-icon>
				<svg-icon p="camera" draggable="true"></svg-icon>
				<svg-icon p="chat" draggable="true"></svg-icon>
				<svg-icon p="check" draggable="true"></svg-icon>
				
			</ul>
  </li>

</ul>


<ul class="collapsibleList">
  <li>
    Charts & Widgets
			<ul id="angular_elements">
<p style="background-color:lightgrey;font-size : 10px" class="angular_elements_child" id="real_time_graph" draggable='true'>Drag to add Real Time Graph</p>
<p style="background-color:lightgrey;font-size : 10px" class="angular_elements_child" id="real_time_gauge" draggable='true'>Drag to add Gauge</p>				
<p style="background-color:lightgrey;font-size : 10px" class="angular_elements_child" id="real_time_tank" draggable='true'>Drag to add Tank</p>
			</ul>
  </li>

</ul>



<!--			
			<div fusioncharts
				width='200'
				height='200'
				type='realtimeline'
				events='myevents'
				dataSource='{{myRealTimeData}}'
				draggable='true'>
			</div>
-->
				


</div>
	
	
<div id="main_ui" class="main">


			<div id="drop-target-one">

			</div>

			
</div>	

<div id="menu">
  <a onclick = "removeCustomMenu(this)">
    <img src="http://puu.sh/nr60s/42df867bf3.png"/> Delete Element
  </a>
  <a  onclick = "removeCustomMenu(this)">
    <img src="http://puu.sh/nr5Z6/4360098fc1.png" /> Option 1
  </a>
  <hr />
  <a  onclick = "showDoubleMenu(this)">
    <i class="fa fa-fort-awesome"></i> Option 2
  </a >
  <a  onclick = "feedDataToElement(this)">
    <i class="fa fa-flag"></i> Bind Data
  </a>
</div>
	
	
<div id="menu1">
  <a>
    <img src="http://puu.sh/nr60s/42df867bf3.png"/> Delete Element
  </a>
  <a>
    <img src="http://puu.sh/nr5Z6/4360098fc1.png" /> Option 1
  </a>
  <hr />
  <a>
    <i class="fa fa-fort-awesome"></i> Option 2
  </a >
  <a>
    <i class="fa fa-flag"></i> Option 3
  </a>
</div>
	
	
<form id='sampleform' method='post' action='' >
   <p>
   Name: <input type='text' name='Name' />
   </p>
   <p>
   Email: <input type='text' name='Email' />
   </p>
   <p>
   <input type='submit' name='Submit' value='Submit' />
   </p>
</form>


	
<!-- <button onclick="myFunction()">Click me</button> -->

</body>


<script>
//CollapsibleLists.applyTo(document.getElementById('drag-elements'));
CollapsibleLists.apply();
</script>


</html>



<script>

var menu_item = document.getElementById("menu").style;
document.addEventListener('click', function(e) {
    menu_item.opacity = "0";
    setTimeout(function() {
      menu_item.visibility = "hidden";
    });
  }, false);

  
</script>



